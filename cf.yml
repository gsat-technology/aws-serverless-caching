
Parameters:
  S3ResourceBucket:
    Type: String
    Description: S3 bucket that contains lambda deployment packages and other data

  UbuntuAMIParameter:
    Type: String
    Default: ami-ae6259cd
    Description: Ubuntu 16.04 AMI (default is ap-southeast-2 image) Choose relevant image for region

  KeyPairParameter:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keypair for EC2 instance

  UseElasticache:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Use elasticache to cache dynamodb items


Resources:

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", ig ] ]

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", vpc ] ]

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", private-subnet ] ]
      VpcId: !Ref VPC

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public-subnet ] ]
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public ] ]

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", private ] ]

  NATRoute:
    DependsOn: PrivateRouteTable
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable

  IGRoute:
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  NATGatewayEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  TelnetMemcachedEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: telnet-memcached-sg
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      VpcId:
        !Ref VPC


  TelnetMemcachedEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.nano
      ImageId:
        Ref: UbuntuAMIParameter
      KeyName:
        Ref: KeyPairParameter
      Tags:
        - Key: Name
          Value: telnet-memcached
      SecurityGroupIds:
        - !Ref TelnetMemcachedEC2SecurityGroup
      SubnetId: !Ref PublicSubnet


  ElasticacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      CacheSubnetGroupName:
        !Join [ "-", [ !Ref "AWS::StackName", dynamodb-cache ] ]
      Description: elasticache subnet group
      SubnetIds:
          - !Ref PrivateSubnet

  ElasticacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: elasticache security group
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "11211"
          ToPort: "11211"
          CidrIp: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", elasticache-sg ] ]
      VpcId:
        !Ref VPC

  Elasticache:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        !Ref ElasticacheSubnetGroup
      ClusterName:
        !Join [ "-", [ !Ref "AWS::StackName", ec ] ]
      Engine: memcached
      NumCacheNodes: 1
      Port: 11211
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", ec ] ]
      VpcSecurityGroupIds:
       - !Ref ElasticacheSecurityGroup


  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 50
        WriteCapacityUnits: 50
      TableName:
        !Join [ "-", [ !Ref "AWS::StackName", AccountTable ] ]
      StreamSpecification:
        StreamViewType: NEW_IMAGE


  LambdaAccountCRUDRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  "*"
              -
                Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource:
                  !Join [ "", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTable  ] ]

  LambdaStreamUpdateElasticacheRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  "*"
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  "*"

  LambdaDynamoDBActionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                Resource:
                  !Join [ "", [ "arn:aws:s3:::", !Ref S3ResourceBucket, "/*"  ] ]
              -
                Effect: "Allow"
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  !Join [ "", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTable  ] ]


  APIGExecuteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  !GetAtt LambdaAccountCRUD.Arn



  LambdaAccountCRUD:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/AccountCRUD.zip
      Description: account entity CRUD
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", AccountCRUD ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaAccountCRUDRole.Arn
      Runtime: python2.7
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          elasticache_dns: !GetAtt Elasticache.ConfigurationEndpoint.Address
          elasticache_port: !GetAtt Elasticache.ConfigurationEndpoint.Port
          dynamodb_table: !Ref DynamoDBTable

  LambdaPopulateDynamoDB:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/PopulateDynamoDB.zip
      Description: loads fake data into DynamoDB
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", PopulateDynamoDB ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaDynamoDBActionRole.Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          s3_bucket: !Ref S3ResourceBucket
          fake_data_key: data/mock_data.json
          dynamodb_table: !Ref DynamoDBTable

  LambdaTruncateDynamoDB:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/TruncateDynamoDB.zip
      Description: truncates data in DynamoDB table
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", TruncateDynamoDB ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaDynamoDBActionRole.Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          dynamodb_table: !Ref DynamoDBTable


  LambdaStreamUpdateElasticache:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/StreamUpdateElasticache.zip
      Description: recieves dynamodb stream and updates elasticache
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", StreamUpdateElasticache ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaStreamUpdateElasticacheRole.Arn
      Runtime: python2.7
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          elasticache_dns: !GetAtt Elasticache.ConfigurationEndpoint.Address
          elasticache_port: !GetAtt Elasticache.ConfigurationEndpoint.Port
          dynamodb_table: !Ref DynamoDBTable

  LambdaDynamoDBEventSource:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt DynamoDBTable.StreamArn
      FunctionName: !Ref LambdaStreamUpdateElasticache
      StartingPosition: LATEST


  APIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        !Join [ "_", [ !Ref "AWS::StackName", APIG ] ]


  APIGAccountResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !GetAtt APIGateway.RootResourceId
      PathPart: account
      RestApiId: !Ref APIGateway

  APIGAccountIDResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !Ref APIGAccountResource
      PathPart: "{id}"
      RestApiId: !Ref APIGateway

  AccountIDResourceAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        !Ref APIGAccountIDResource
      RestApiId:
        !Ref APIGateway
      Integration:
        Credentials:
          !GetAtt APIGExecuteLambdaRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
              - LambdaAccountCRUD
              - Arn

  AccountResourceAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        !Ref APIGAccountResource
      RestApiId:
        !Ref APIGateway
      Integration:
        Credentials:
          !GetAtt APIGExecuteLambdaRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
              - LambdaAccountCRUD
              - Arn
