
Parameters:
  S3ResourceBucket:
    Type: String
    Description: S3 bucket that contains lambda deployment packages and other data


Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", vpc ] ]

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", private-subnet ] ]
      VpcId: !Ref VPC

  ElasticacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      CacheSubnetGroupName:
        !Join [ "-", [ !Ref "AWS::StackName", dynamodb-cache ] ]
      Description: elasticache subnet group
      SubnetIds:
          - !Ref PrivateSubnet

  ElasticacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: elasticache security group
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "11211"
          ToPort: "11211"
          CidrIp: "10.0.0.0/24"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", elasticache-sg ] ]
      VpcId:
        !Ref VPC

  Elasticache:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        !Ref ElasticacheSubnetGroup
      ClusterName:
        !Join [ "-", [ !Ref "AWS::StackName", ec ] ]
      Engine: memcached
      NumCacheNodes: 1
      Port: 11211
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", ec ] ]
      VpcSecurityGroupIds:
       - !Ref ElasticacheSecurityGroup


  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 50
        WriteCapacityUnits: 50
      TableName:
        !Join [ "-", [ !Ref "AWS::StackName", DBTable2 ] ]
      StreamSpecification:
        StreamViewType: NEW_IMAGE


  LambdaReadWriteElasticacheRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  "*"

  LambdaDynamoDBActionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                Resource:
                  !Join [ "", [ "arn:aws:s3:::", !Ref S3ResourceBucket, "/*"  ] ]
              -
                Effect: "Allow"
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:Scan
                Resource:
                  !Join [ "", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTable  ] ]





#  LambdaEventSource:
#    Type: "AWS::Lambda::EventSourceMapping"
#    Properties:
#      BatchSize: Integer
#      Enabled: Boolean
#      EventSourceArn: String
#      FunctionName: String
#      StartingPosition: String


  LambdaReadWriteElasticache:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/ReadWriteElasticache.zip
      Description: triggered by dynamodb stream
      FunctionName: ReadWriteElasticache
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaReadWriteElasticacheRole.Arn
      Runtime: python2.7
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          elasticache_dns: !GetAtt Elasticache.ConfigurationEndpoint.Address
          elasticache_port: !GetAtt Elasticache.ConfigurationEndpoint.Port
          dynamodb_table: !Ref DynamoDBTable

  LambdaPopulateDynamoDB:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/PopulateDynamoDB.zip
      Description: loads fake data into DynamoDB
      FunctionName: PopulateDynamoDB
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaDynamoDBActionRole.Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          s3_bucket: !Ref S3ResourceBucket
          fake_data_key: data/fake_data.json
          dynamodb_table: !Ref DynamoDBTable

  LambdaTruncateDynamoDB:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: lambda/TruncateDynamoDB.zip
      Description: truncates data in DynamoDB table
      FunctionName: TruncateDynamoDB
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaDynamoDBActionRole.Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          dynamodb_table: !Ref DynamoDBTable
